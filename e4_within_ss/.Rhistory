## ================================================================================================================
## run t-tests to compare friendship, partnership, and willingness to pay measures between conditions:
table(d$countf_cat)[1]/sum(table(d$countf_cat))
table(d$countf_cat)[2]/sum(table(d$countf_cat))
table(d$countf_cat)[3]/sum(table(d$countf_cat))
tapply(d$vB_sue_AV_1, d$countf_cat, mean)
d <- subset(d, d$countf_cat != 3)
## (1) SUE VEHICLE A DRIVER
vA_sue_T <- t.test(vA_sue_AV_1 ~ countf_cat, data = d, paired = FALSE)
vA_sue_T
## (2) SUE VEHICLE B MANUFACTURER
vB_sue_T <- t.test(vB_sue_AV_1 ~ countf_cat, data = d, paired = FALSE)
vB_sue_T
## (3) VEHICLE B DEFECTIVE
defective_T <- t.test(defective_AV_1 ~ countf_cat, data = d, paired = FALSE)
defective_T
## (4) VEHICLE B NEGLIGENT
negligent_T <- t.test(negl ~ cond_name, data = d_merged, paired = FALSE)
print("NEGLIGENT:")
print(paste("statistic: ", negligent_T$statistic))
print(paste("p-value: ", negligent_T$p.value))
print(paste("AV mean: ", mean(d_merged[d_merged$cond_name == "av",]$negl)))
print(paste("Human mean: ", mean(d_merged[d_merged$cond_name == "human",]$negl)))
print(paste("AV std: ", sd(d_merged[d_merged$cond_name == "av",]$negl)))
print(paste("Human std: ", sd(d_merged[d_merged$cond_name == "human",]$negl)))
print("")
## (5) COUNTERFACTUAL
counterfactual_T <- t.test(countf ~ cond_name, data = d_merged, paired = FALSE)
print("COUNTERFACTUAL:")
print(paste("statistic: ", counterfactual_T$statistic))
print(paste("p-value: ", counterfactual_T$p.value))
print(paste("AV mean: ", mean(d_merged[d_merged$cond_name == "av",]$countf)))
print(paste("Human mean: ", mean(d_merged[d_merged$cond_name == "human",]$countf)))
print(paste("AV std: ", sd(d_merged[d_merged$cond_name == "av",]$countf)))
print(paste("Human std: ", sd(d_merged[d_merged$cond_name == "human",]$countf)))
print("")
## (6) CAPABILITY
capability_T <- t.test(capab ~ cond_name, data = d_merged, paired = FALSE)
print("CAPABILITY:")
print(paste("statistic: ", capability_T$statistic))
print(paste("p-value: ", capability_T$p.value))
print(paste("AV mean: ", mean(d_merged[d_merged$cond_name == "av",]$capab)))
print(paste("Human mean: ", mean(d_merged[d_merged$cond_name == "human",]$capab)))
print(paste("AV std: ", sd(d_merged[d_merged$cond_name == "av",]$capab)))
print(paste("Human std: ", sd(d_merged[d_merged$cond_name == "human",]$capab)))
print("")
## (7) FAULT
fault_T <- t.test(fault ~ cond_name, data = d_merged, paired = FALSE)
print("FAULT:")
print(paste("statistic: ", fault_T$statistic))
print(paste("p-value: ", fault_T$p.value))
print(paste("AV mean: ", mean(d_merged[d_merged$cond_name == "av",]$fault)))
print(paste("Human mean: ", mean(d_merged[d_merged$cond_name == "human",]$fault)))
print(paste("AV std: ", sd(d_merged[d_merged$cond_name == "av",]$fault)))
print(paste("Human std: ", sd(d_merged[d_merged$cond_name == "human",]$fault)))
print("")
## (8) SUPERHUMAN
superhuman_T <- t.test(superh ~ cond_name, data = d_merged, paired = FALSE)
print("SUPERHUMAN:")
print(paste("statistic: ", superhuman_T$statistic))
print(paste("p-value: ", superhuman_T$p.value))
print(paste("AV mean: ", mean(d_merged[d_merged$cond_name == "av",]$superh)))
print(paste("Human mean: ", mean(d_merged[d_merged$cond_name == "human",]$superh)))
print(paste("AV std: ", sd(d_merged[d_merged$cond_name == "av",]$superh)))
print(paste("Human std: ", sd(d_merged[d_merged$cond_name == "human",]$superh)))
print("")
superhuman_T
cor(d_merged[,2:9])
mod <- lm(countf ~ cond_name*superh, data = d_merged)
summary(mod)
## cor.test(d_merged$firm_sue, d_merged$v2_sue)
## cor.test(d_merged$moral, d_merged$moral, data = d_merged)
## cor.test(d_merged$blame_av, d_merged$moral, data = d_merged)
## cor.test(d_merged$blame_firm, d_merged$moral, data = d_merged)
## cor.test(d_merged$blame_v2, d_merged$moral, data = d_merged)
## ================================================================================================================
##                                             MEDIATION ANALYSIS
## ================================================================================================================
# SINGLE MEDIATION
process(data = d, y = "vB_sue_AV_1", x = "countf_cat",
m ="defective_AV_1", model = 4, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
d_merged$cond_n <- ifelse(d_merged$cond=="FL_39", 1, 2)
# MODERATED SERIAL MEDIATION
# 87 = B path, 83 = A path, 91 = center path
process(data = d_merged, y = "vB_sue_AV_1", x = "cond_n",
m =c("countf", "defec"), w = "superh", model = 83, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# SERIAL MEDIATION
process(data = d_merged, y = "vB_sue", x = "cond_n",
m =c("countf", "capab"), model = 6, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## ================================================================================================================
##                                              PLOTTING MAIN FIGURES
## ================================================================================================================
## plotting all measures
## FL39 --> AV condition; FL40 --> HDV condition
t_names <- c("Yes", "No")
## (1) Sue VA driver
p1_1 <- ggplot(d,aes(x=factor(countf_cat),y=vA_sue_AV_1)) +
theme_bw() + coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c(1, 2)), annotation="***", textsize = 5.5)
p1_1 <- p1_1 + theme(text = element_text(size=16),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names) +
ggtitle("Sue Veh. A Driver") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=12)) +
theme(axis.text.y = element_text(size=10)) +
theme(plot.title = element_text(size=12, hjust=0.5)) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p1_1
## (2) Sue VB manufacturer
p1_2 <- ggplot(d,aes(x=factor(countf_cat),y=vB_sue_AV_1)) +
theme_bw() + coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c(1, 2)), annotation="***", textsize = 5.5)
p1_2 <- p1_2 + theme(text = element_text(size=16),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names) +
ggtitle("Sue Veh. B Manufacturer") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=12)) +
theme(axis.text.y = element_text(size=10)) +
theme(plot.title = element_text(size=12, hjust=0.5)) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p1_2
## (3) VB Defective
p1_3 <- ggplot(d,aes(x=factor(countf_cat),y=defective_AV_1)) +
theme_bw() + coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c(1, 2)), annotation="***", textsize = 5.5)
p1_3 <- p1_3 + theme(text = element_text(size=16),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names) +
ggtitle("Veh. B Defective") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=12)) +
theme(axis.text.y = element_text(size=10)) +
theme(plot.title = element_text(size=12, hjust=0.5)) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p1_3
## (4) VB Negligence
p1_4 <- ggplot(d_merged,aes(x=factor(cond_name),y=negl)) +
theme_bw() + coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c(1, 2)), annotation="***", textsize = 5.5)
p1_4 <- p1_4 + theme(text = element_text(size=16),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names) +
ggtitle("Veh. B Negligence") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=12)) +
theme(axis.text.y = element_text(size=10)) +
theme(plot.title = element_text(size=12, hjust=0.5)) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p1_4
## (5) Counterfactual
p1_5 <- ggplot(d_merged,aes(x=factor(cond_name),y=countf)) +
theme_bw() + coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c(1, 2)), annotation="***", textsize = 5.5)
p1_5 <- p1_5 + theme(text = element_text(size=16),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names) +
ggtitle("Counterfactual") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=12)) +
theme(axis.text.y = element_text(size=10)) +
theme(plot.title = element_text(size=12, hjust=0.5)) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p1_5
## (6) Capability to Avoid
p1_6 <- ggplot(d_merged,aes(x=factor(cond_name),y=capab)) +
theme_bw() + coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("av", "human")), annotation="***", textsize = 5.5)
p1_6 <- p1_6 + theme(text = element_text(size=16),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names) +
ggtitle("Capability to Avoid") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=12)) +
theme(axis.text.y = element_text(size=10)) +
theme(plot.title = element_text(size=12, hjust=0.5)) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p1_6
## (7) Avoid when not at fault
p1_7 <- ggplot(d_merged,aes(x=factor(cond_name),y=fault)) +
theme_bw() + coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("av", "human")), annotation="***", textsize = 5.5)
p1_7 <- p1_7 + theme(text = element_text(size=16),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names) +
ggtitle("Avoid when not at fault") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=12)) +
theme(axis.text.y = element_text(size=10)) +
theme(plot.title = element_text(size=12, hjust=0.5)) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p1_7
## (8) Superhuman
p1_8 <- ggplot(d_merged,aes(x=factor(cond_name),y=superh)) +
theme_bw() + coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("av", "human")), annotation="*", textsize = 5.5)
p1_8 <- p1_8 + theme(text = element_text(size=16),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names) +
ggtitle("Superhuman") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=12)) +
theme(axis.text.y = element_text(size=10)) +
theme(plot.title = element_text(size=12, hjust=0.5)) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p1_8
## PLOT SERIES 1
dev.new(width=13,height=6,noRStudioGD = TRUE)
figure1 <- ggarrange(p1_1, p1_3, p1_3, p1_4, p1_5, p1_6, p1_7, p1_8, nrow=2,ncol=4,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
annotate_figure(figure1,left = text_grob("Mean Rating", color="black", face ="plain",size=16, rot=90),
bottom = text_grob("Scenario Condition", color="black", face ="plain",size=16))
dev.new(width=13,height=6,noRStudioGD = TRUE)
figure1 <- ggarrange(p1_1, p1_2, p1_3, nrow=1,ncol=3,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
annotate_figure(figure1,left = text_grob("Mean Rating", color="black", face ="plain",size=16, rot=90),
bottom = text_grob("Considered Counterfactual", color="black", face ="plain",size=16))
#figure1 <- ggarrange(p1_2, p1_3, p1_5, nrow=1,ncol=3,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
#annotate_figure(figure1,left = text_grob("Mean Rating", color="black", face ="plain",size=16, rot=90),
#                bottom = text_grob("Scenario Condition", color="black", face ="plain",size=16))
plot(figure1)
write.csv(d_merged, 'd_spss.csv')
## ================================================================================================================
##                                                  Comparing E6 to E1-3
## ================================================================================================================
#1=AV, 2=HDV
d$exp <- 6
names(d)[names(d)=="countf_cat"] <- "cond_n"
names(d)[names(d)=="vB_sue_AV_1"] <- "vB_sue"
d1 <- read.csv('e1_processed.csv')
d1$exp <- 1
d2 <- read.csv('e2_processed.csv')
d2$exp <- 2
d3 <- read.csv('e3_processed.csv')
d3$exp <- 3
colnames(d[,c(12,14)])
colnames(d1[,c(16,4)])
colnames(d2[,c(17,4)])
colnames(d3[,c(17,4)])
d_final <- rbind(d[,c(12,14,31)], d1[,c(16,4,17)], d2[,c(17,4,19)], d3[,c(17,4,18)])
d_f_s <- subset(d_final, d_final$cond_n == 1)
mod_6_1 <- t.test(d_f_s$vB_sue[d_f_s$exp==6], d_f_s$vB_sue[d_f_s$exp==1], paired = FALSE)
mod_6_1
mod_6_2 <- t.test(d_f_s$vB_sue[d_f_s$exp==6], d_f_s$vB_sue[d_f_s$exp==2], paired = FALSE)
mod_6_2
mod_6_3 <- t.test(d_f_s$vB_sue[d_f_s$exp==6], d_f_s$vB_sue[d_f_s$exp==3], paired = FALSE)
mod_6_3
t_names <- c("Exp1", "Exp2", "Exp3", "Exp4")
p1_2_1 <- ggplot(d_f_s,aes(x=factor(exp),y=vB_sue)) +
theme_bw() + coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(y_position = c(99,99), comparisons = list(c(1, 4)), annotation="***", textsize = 6)+
geom_signif(y_position = c(106,106), comparisons = list(c(2, 4)), annotation="***", textsize = 6)+
geom_signif(y_position = c(116,116), comparisons = list(c(3, 4)), annotation="***", textsize = 6)+
coord_cartesian(ylim=c(1,125))
p1_2_1 <- p1_2_1 + theme(text = element_text(size=16),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names) +
ggtitle("Sue Veh. B Manufacturer") +
xlab ("Experiment") + ylab ("Mean Rating") +
theme_classic() +
theme(axis.text.x = element_text(size=15)) +
theme(axis.title = element_text(size=18)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=20, hjust=0.5)) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p1_2_1
dev.new(width=11,height=6,noRStudioGD = TRUE)
p1_2_1
dev.new(width=13,height=6,noRStudioGD = TRUE)
figure1 <- ggarrange(p1_1, p1_2, p1_3, nrow=1,ncol=3,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
annotate_figure(figure1,left = text_grob("Mean Rating", color="black", face ="plain",size=16, rot=90),
bottom = text_grob("Simulated Superior Human Driver", color="black", face ="plain",size=16))
## ================================================================================================================
##                                 Harvard Business School, Ethical Intelligence Lab
## ================================================================================================================
##                                DATA ANALYSIS | AV SCENARIOS | WITHIN SUBJECTS
## ================================================================================================================
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## install packages
library(ggpubr)
library(rstatix)
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'lsmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools'        # get Cramer's V
)
library("lmerTest")
## ================================================================================================================
##                                                  PRE-PROCESSING
## ================================================================================================================
## read in data:
# if importing from Qualtrics: (i) export data as numeric values, and (ii) delete rows 2 and 3 of the .csv file.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
d <- read.csv('data_av_ws_full.csv')
## explore dataframe:
dim(d) # will provide dimensions of the dataframe by row [1] and column [2]
colnames(d) # will provide all column names
summary(d)
dim(d)[1]
## rename condition variables:
# names(d)[names(d) == 'order'] <- 'agent_order'
## perform attention exclusions:
# this will remove responses from the dataframe that failed attention checks (i.e., "1" or "2")
d <- subset(d, (d$att1 == 2 & d$att2 == 2))
dim(d)
## ================================================================================================================
##                                              PERFORM EXCLUSIONS
## ================================================================================================================
## get number of participants BEFORE exclusions:
n_original <- dim(d)[1] # extracting number of rows only, not columns
n_original
## perform comprehension exclusions:
# this will remove responses from the dataframe that failed comprehension checks (i.e., "2")
d <- subset(d, ( d$Q132 == 1 & d$Q133 == 1 & d$comp1 == 3 & d$comp_accident == 1))
dim(d) # number of participants should decrease after comprehension exclusions
## get number of participants AFTER exclusions:
n_final <- dim(d)[1] # extracting number of rows only, not columns
n_final
percent_excluded <- (n_original - n_final)/n_original
percent_excluded
## ================================================================================================================
##                                                    SUBSETTING
## ================================================================================================================
## define new data frame to extract pre-processed data into:
d_subset <- array(dim=c(dim(d)[1], 20))
colnames(d_subset) <- c('order',
'vA_sue_AV', 'vB_sue_AV', 'defective_AV',
'negligence_AV', 'counterfactual_AV', 'capability_AV', 'fault_AV',
'vA_sue_HDV', 'vB_sue_HDV', 'defective_HDV',
'negligence_HDV', 'counterfactual_HDV', 'capability_HDV', 'fault_HDV',
'superhuman', 'ai_familiarity', 'insurance_fmlrty',
'mot_insurance_fmlrty', 'prod_liab_fmlrty')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
## extract good data from the middle part of raw data:
for(i in 1:dim(d)[1]) {
curr_AV <- d[i,c(29:35)][!is.na(d[i,c(29:35)])] # for a given row, get only the non-NA values
curr_HDV <- d[i,c(46:52)][!is.na(d[i,c(46:52)])]
curr_other <- d[i,c(55:59)][!is.na(d[i,c(55:59)])]
d_subset[i,2:8] <- as.numeric(curr_AV[curr_AV!= ""])# and only the non-empty values
d_subset[i,9:15] <- as.numeric(curr_HDV[curr_HDV!= ""])
d_subset[i,16:20] <- as.numeric(curr_other[curr_other!= ""])
d_subset[i,1] <- d[i,'order']
}
# ## define new data frame to extract pre-processed data into:
# f_subset <- array(dim=c(dim(d)[1], 20))
# colnames(f_subset) <- c('agent_order', 'ai_friend', 'ai_partner', 'ai_wtp', 'h_friend', 'h_partner', 'h_wtp')
# f_subset <- as.data.frame(f_subset, stringsAsFactors=FALSE)
#
# for(i in 1:dim(d_subset)[1]) {
#   f_subset[i,1] <- d_subset[i,1]
#   if(d_subset$agent_order[i] == 1) {
#       f_subset[i,2:7] <- d_subset[i,2:7]
#   }
#   else {
#       f_subset[i,2:4] <- d_subset[i,5:7]
#       f_subset[i,5:7] <- d_subset[i,2:4]
#   }
# }
d_merged <- array(dim=c(dim(d)[1]*2, 10))
colnames(d_merged) <- c('order', 'cond',
'vA_sue', 'vB_sue', 'defective',
'negligence', 'counterfactual', 'capability', 'fault')
d_merged <- as.data.frame(d_merged, stringsAsFactors=FALSE)
d_merged$order <- c(d_subset$order, d_subset$order)
d_merged$cond <- c(rep(c(1),each=dim(d)[1]), rep(c(2),each=dim(d)[1])) #1= AI, 2 =Human
d_merged$vA_sue <- c(d_subset$vA_sue_AV, d_subset$vA_sue_HDV)
d_merged$vB_sue <- c(d_subset$vB_sue_AV, d_subset$vB_sue_HDV)
d_merged$defective <- c(d_subset$defective_AV, d_subset$defective_HDV)
d_merged$negligence <- c(d_subset$negligence_AV, d_subset$negligence_HDV)
d_merged$counterfactual <- c(d_subset$counterfactual_AV, d_subset$counterfactual_HDV)
d_merged$capability <- c(d_subset$capability_AV, d_subset$capability_HDV)
d_merged$fault <- c(d_subset$fault_AV, d_subset$fault_HDV)
# creates a new variable for the string version of condition
d_merged$cond_name <- ifelse(d_merged$cond==1, "av", "human")
## ================================================================================================================
##                                            PARTICIPANT CHARACTERISTICS
## ================================================================================================================
# ## % prior experience apps
# table(d$ai_familiarity)[1]/sum(table(d$ai_familiarity))
# d$ai_familiarity
# #more like 11
# 11/dim(d)[1]
## age
mean(as.numeric(d$age), trim = 0, na.rm = TRUE) ## mean age
## gender
table(d$gender)[2]/sum(table(d$gender)) ## percentage of females
## ai familiarity
mean(as.numeric(d$ai_familiarity), trim = 0, na.rm = TRUE) ## mean ai familiarity
## insurance familiarity
mean(as.numeric(d$insurance_fmlrty), trim = 0, na.rm = TRUE) ## mean insurance familiarity
## motor insurance familiarity
mean(as.numeric(d$mot_insurance_fmlrty), trim = 0, na.rm = TRUE) ## mean motor insurance familiarity
## motor insurance familiarity
mean(as.numeric(d$prod_liab_fmlrty), trim = 0, na.rm = TRUE) ## mean product liability familiarity
## ================================================================================================================
##                              DATA ANALYSIS - SUMMARY, T-TESTS, AND LINEAR REGRESSION
## ================================================================================================================
## (1) VA SUE
## get summary statistics
d_merged %>% group_by(cond_name) %>% get_summary_stats(vA_sue, type = "mean_sd")
mean(as.numeric(d_subset$vA_sue_AV), trim = 0, na.rm = TRUE)
sd(as.numeric(d_subset$vA_sue_AV), na.rm = TRUE)
mean(as.numeric(d_subset$vA_sue_HDV), trim = 0, na.rm = TRUE)
sd(as.numeric(d_subset$vA_sue_HDV), na.rm = TRUE)
vA_sue_T <- t.test(vA_sue ~ cond, data = d_merged, paired = TRUE)
vA_sue_T
vA_sue_mod <- lmer(vA_sue ~ cond + (1 | order), data=d_merged)
summary(vA_sue_mod)
vA_sue_mod <- lmer(vA_sue ~ cond + (1 | order), data=d_merged)
summary(vA_sue_mod)
vB_sue_T <- t.test(vB_sue ~ cond, data = d_merged, paired = TRUE)
vB_sue_T
vB_sue_mod <- lmer(vB_sue ~ cond + (1 | order), data=d_merged)
summary(vB_sue_mod)
defective_T <- t.test(defective ~ cond, data = d_merged, paired = TRUE)
defective_T
defective_mod <- lmer(defective ~ cond + (1 | order), data=d_merged)
summary(defective_mod)
counterfactual_T <- t.test(counterfactual ~ cond, data = d_merged, paired = TRUE)
counterfactual_T
counterfactual_mod <- lmer(counterfactual ~ cond + (1 | order), data=d_merged)
summary(counterfactual_mod)
